View(dat3.df)
dat3$T <- dat3.df$V1 == 1
dat3$F <- dat3.df$V1 == 0
View(dat3)
set.seed(2020)
options(digits = 3)
nn <- neuralnet( T + F ~ ., data = dat3.df[,-2], hidden = 5, linear.output = F)
nn <- neuralnet( T + F ~ ., data = dat3.df[ ,-1], hidden = 5, linear.output = F)
dat3.df[ ,-1]
?neuralnet
nn <- neuralnet( T + F ~ ., data = dat3.df[ ,-1], hidden = 5, linear.output = F)
nn <- neuralnet( T + F ~ ., data = dat3.df[ ,-2], hidden = 5, linear.output = F)
dat3.df$T <- dat3.df$V1 == 1
dat3.df$F <- dat3.df$V1 == 0
nn <- neuralnet( T + F ~ ., data = dat3.df[ ,-2], hidden = 5, linear.output = F)
dat3_nn <- preProcess(dat3, method = 'range')
dat3.df <- predict(dat3_nn, dat3)
dat3.df$T <- dat3.df$V1 == 1
dat3.df$F <- dat3.df$V1 == 0
set.seed(2020)
options(digits = 3)
nn <- neuralnet( T + F ~ ., data = dat3.df[ ,-2], hidden = 5, linear.output = F)
dat3.df[ ,-2]
dat3.df[ ,-1:2]
dat3.df[ ,-(1:2)]
nn <- neuralnet( T + F ~ ., data = dat3.df[ ,-(1:2)], hidden = 5, linear.output = F)
rm(list = ls()); gc()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Study/Kaggle/Titanic")
library(tidyverse) # metapackage with lots of helpful functions
library(Metrics)
library(dplyr)
list.files(path = "../Titanic")
## read data
train <- read.csv('train.csv', header = T, stringsAsFactors = F, na.strings = '')
test <- read.csv('test.csv', header = T, stringsAsFactors = F, na.strings = '')
## conbine data
test$Survived <- NA
all <- rbind(train, test)
## data overview
dim(all)
aggregate(Survived ~ Sex + Pclass, data = train, FUN = function(x) {sum(x)/length(x)})
## check missing data
matrix.na <- is.na(all)
colSums(matrix.na)
pmiss <- colMeans(matrix.na)
nmiss <- rowMeans(matrix.na)
plot(pmiss)
library(rpart)
agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare,train)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(agefit)
## Extract Features
extractFeatures <- function(data, istrain=TRUE) {
features <- c("Pclass",
"Sex",
"Age",
"SibSp",
"Parch",
"Fare")
fea <- data[,features]
str(fea)
#fea$Sex <- fea$Sex[fea$Sex == "^male$"] <- "1"
fea$Sex[grep("\\bmale\\b", fea$Sex)] <- "1"
fea$Sex[fea$Sex == "female"] <- "0"
fea$Sex<-as.numeric(as.character(fea$Sex))
fea$Age[is.na(fea$Age)] <- predict(agefit,fea[is.na(fea$Age),])
fea$FamilySize <- (fea$SibSp + fea$Parch + 1)/11
fea$Fare[is.na(fea$Fare)] <- mean(fea$Fare, na.rm = T)
fea$Pclass <- fea$Pclass/3
fea$SibSp <- fea$SibSp/max(fea$SibSp)
fea$Parch <- fea$Parch/max(fea$Parch)
fea$Age <- fea$Age/max(all$Age, na.rm = T)
fea$Fare <- fea$Fare/max(fea$Fare, na.rm = T)
fea[is.na(fea)] <- 0
fea[] <- lapply(fea, function(x) as.numeric(as.character(x)))
return(fea)
}
xtrain <- extractFeatures(train,TRUE)
attach(train)
xtrain <- cbind(Survived, xtrain)
detach(train)
colSums(is.na(xtrain))
xtest <-extractFeatures(test,FALSE)
colSums(is.na(xtest))
##Neuralnet
library(neuralnet)
library(nnet)
library(caret)
library(e1071)
xtrain_nn <- preProcess(xtrain, method = 'range')
xtrain.df <- predict(xtrain_nn, xtrain)
xtrain.df$Live <- xtrain.df$Survived == 1
xtrain.df$Die <- xtrain.df$Survived == 0
## read data
train <- read.csv('train.csv', header = T, stringsAsFactors = F, na.strings = '')
View(test)
test <- read.csv('test.csv', header = T, stringsAsFactors = F, na.strings = '')
## conbine data
test$Survived <- NA
all <- rbind(train, test)
## Extract Features
extractFeatures <- function(data, istrain=TRUE) {
features <- c("Pclass",
"Sex",
"Age",
"SibSp",
"Parch",
"Fare")
fea <- data[,features]
str(fea)
#fea$Sex <- fea$Sex[fea$Sex == "^male$"] <- "1"
fea$Sex[grep("\\bmale\\b", fea$Sex)] <- "1"
fea$Sex[fea$Sex == "female"] <- "0"
fea$Sex<-as.numeric(as.character(fea$Sex))
fea$Age[is.na(fea$Age)] <- predict(agefit,fea[is.na(fea$Age),])
fea$FamilySize <- (fea$SibSp + fea$Parch + 1)/11
fea$Fare[is.na(fea$Fare)] <- mean(fea$Fare, na.rm = T)
fea$Pclass <- fea$Pclass/3
fea$SibSp <- fea$SibSp/max(fea$SibSp)
fea$Parch <- fea$Parch/max(fea$Parch)
fea$Age <- fea$Age/max(all$Age, na.rm = T)
fea$Fare <- fea$Fare/max(fea$Fare, na.rm = T)
fea[is.na(fea)] <- 0
fea[] <- lapply(fea, function(x) as.numeric(as.character(x)))
return(fea)
}
xtrain <- extractFeatures(train,TRUE)
xtrain_nn <- preProcess(xtrain, method = 'range')
rm(list=ls()); gc()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Fullerton/Course/ISDS_574/ISDS-574-Group-Project")
## Read dataset
dat = read.csv('companies-2000_v6.csv', head=T, stringsAsFactors=F, na.strings='')
library(tidyverse)
ind <- dat$Industry.Groups
ind_split <- strsplit(ind, ",")
length(ind_split[][[]])
first_ind <- function(i){
l <- first(ind_split[i][[1]])
return(l)
}
ind_first <- lapply(1:2000, first_ind)
ind_first <- as.character(ind_first)
table(ind_first)
dat2 <- cbind(dat$Y, ind_first)
library(fastDummies)
dat3 = dummy_columns(dat2, select_columns = 'ind_first', remove_most_frequent_dummy = T)
##Neuralnet
library(neuralnet)
library(nnet)
library(caret)
library(e1071)
dat3_nn <- preProcess(dat3, method = 'range')
dat3.df <- predict(dat3_nn, dat3)
dat3.df$T <- dat3.df$V1 == 1
dat3.df$F <- dat3.df$V1 == 0
set.seed(2020)
options(digits = 3)
nn <- neuralnet( T + F ~ ., data = dat3.df[ ,-(1:2)], hidden = 5, linear.output = F)
View(dat3.df)
dat3.df[ ,-(1:2)]
nn <- neuralnet( T + F ~ ., data = dat3.df, hidden = 5, linear.output = F)
dat3$T <- dat3$V1 == 1
dat3$F <- dat3$V1 == 0
nn <- neuralnet( T + F ~ ., data = dat3[ ,-(1:2)], hidden = 5, linear.output = F)
nn <- neuralnet( T + F ~ , data = dat3[ ,-(1:2)], hidden = 5, linear.output = F)
nn <- neuralnet( T + F ~ ., data = dat3[ ,-(1:2)], hidden = 5, linear.output = F)
dat3 = dummy_columns(dat2, select_columns = 'ind_first', remove_most_frequent_dummy = T)
View(dat3)
nn <- neuralnet( V1 ~ ., data = dat3[ ,-2], hidden = 5, linear.output = F)
nn <- neuralnet( V1~ ., data = dat3[ ,-2], hidden = 5, linear.output = F)
nn <- neuralnet( V1~dat3$`ind_first_Content and Publishing`, data = dat3[ ,-2], hidden = 5, linear.output = F)
dat3[ ,-2]
nn <- neuralnet( V1 ~ ., data = dat3[ ,-2], hidden = 5, linear.output = F)
View(dat3_nn)
nn <- neuralnet( V1 ~ dat3$ind_first_Hardware+dat3$`ind_first_Financial Services`, data = dat3[ ,-2], hidden = 5, linear.output = F)
nn <- neuralnet( V1 ~ dat3$ind_first_Hardware+dat3$`ind_first_Financial Services`, data = dat3, hidden = 5, linear.output = F)
View(dat3)
View(dat2)
?strtoi
strtoi(dat2$ind_fist)
strtoi(dat2$ind_first)
dat2$ind_first
View(dat2)
dat2
dat2[1]
dat2[2]
?as.character()
?as.character
as.numeric(c("ad"))
View(dat3)
ind_first <- lapply(1:2000, first_ind) %>% as.character()
table(ind_first)
?table
?dummy_columns
dat2 <- cbind(dat$Y, ind)
View(dat2)
dat3 = dummy_columns(dat2, select_columns = 'ind_first', remove_most_frequent_dummy = F, split = T)
dat3 = dummy_columns(dat2, select_columns = 'ind', remove_most_frequent_dummy = F, split = T)
View(dat3)
dat2 <- cbind(dat$Y, ind_split)
dat3 = dummy_columns(dat2, select_columns = 'ind', remove_most_frequent_dummy = F, split = T)
dat3 = dummy_columns(dat2, select_columns = 'ind_split', remove_most_frequent_dummy = F, split = T)
dat2 <- cbind(dat$Y, ind_first)
dat2 <- cbind(dat$Y, ind_split)
View(dat2)
dat2 <- cbind(dat$Y, ind_first)
dat2 <- cbind(dat$Y, ind_split)
View(dat2)
dat2 <- cbind(dat$Y, ind_split)
dat2 <- cbind(dat$Y, ind_split)
dat2 <- cbind(dat$Y, ind_first)
dat2 <- cbind(dat$Y, ind_split)
View(dat2)
View(ind_split)
dim(ind_split)
class(ind_split)
ind_split[1]
View(ind_split)
dat2 <- cbind(dat$Y, ind_split)
dim(dat2)
View(dat2)
dat2 <- data.frame(dat$Y,ind_split)
dat2[1]
dat2[1,]
dat2 <- cbind(dat$Y,ind_split)
as.data.frame(dat2)
dat2 <- as.data.frame(dat2)
View(dat2)
dat3 = dummy_columns(dat2, select_columns = 'ind_split', remove_most_frequent_dummy = F, split = T)
View(dat2)
tabel(dat2$ind_split)
table(dat2$ind_split)
a <- c("a","b","c")
b <- c(1,0,1)
c <- data.frame(b, a)
View(c)
a <- c(c("a","b"),"b","c")
b <- c(1,0,1)
c <- data.frame(b, a)
c <- cbind(b,a)
a <- c("a","b","c")
b <- c(1,0,1)
c <- data.frame(b,a)
d <- dummy_columns(c, select_columns = "a")
View(d)
c$a[1]
c$a[1] <- c("a", "b")
dat2 <- cbind(dat$Y, ind_first)
dat3 = dummy_columns(dat2, select_columns = 'ind_first', remove_most_frequent_dummy = F)
View(dat3)
table(ind_first)
count(which(ind_first %in% "Events"))
count(which(ind_first %in% c("Events")))
which(ind_first %in% c("Events"))
sum(which(ind_first %in% c("Events")))
count(which(ind_first %in% c("Events")))
length(which(ind_first %in% c("Events")))
dat2 <- as.data.frame(dat2)
View(dat2)
dat3 = dummy_columns(dat2, select_columns = 'ind_first', remove_most_frequent_dummy = F)
View(dat3)
dat2 <- data.frame(dat$Y, ind_first)
View(dat2)
dat2 <- data.frame(dat$Y, ind_first)
dat3 = dummy_columns(dat2, select_columns = 'ind_first', remove_most_frequent_dummy = F)
ggplot(dat2) + geom_histogram(dat2$ind_first)
ggplot(dat2, aes(x = ind_first)) + geom_histogram(dat2$ind_first)
ggplot(dat2) + geom_histogram(dat2$ind_first,aes(x = ind_first))
ggplot(dat2, aes(x=ind_first)) + geom_histogram()
ggplot(dat2, aes(x=ind_first)) + geom_histogram(stat = "count")
d
e <- neuralnet(b ~ ., data = d, hidden = 2)
e <- neuralnet(b ~ ., data = d[,-2], hidden = 2)
plot(e, rep = "best")
e <- neuralnet(b ~ ., data = d[,-2], hidden = c(2,1))
plot(e, rep = "best")
nn <- neuralnet( V1 ~ ., data = dat3[ ,-2], hidden = 5)
View(dat3)
nn <- neuralnet( dat.Y ~ ., data = dat3[ ,-2], hidden = 5)
?trimws
dat2$ind_first[2]
dat2$ind_first[3]
trimws("Financial Services")
trimws("Financial Services","b")
gsub(" ", "", c("Financial Services"))
gsub(" ", "", ind_first)
ind_first <- lapply(1:2000, first_ind) %>% as.character() %>% gsub(" ", "", )
ind_first <- lapply(1:2000, first_ind) %>% as.character()
ind_f <- gsub(" ", "", ind_first)
table(ind_f)
dat2 <- data.frame(dat$Y, ind_f)
View(dat2)
dat3 = dummy_columns(dat2, select_columns = 'ind_f', remove_most_frequent_dummy = F)
View(dat3)
nn <- neuralnet( dat.Y ~ ., data = dat3[ ,-2], hidden = 5)
## plot network
plot(nn, rep="best")
nn <- neuralnet( dat.Y ~ ., data = dat3[ ,-2], hidden = 10)
## plot network
plot(nn, rep="best")
nn <- neuralnet( dat.Y ~ ., data = dat3[ ,-2], hidden = c(20,5,3))
## plot network
plot(nn, rep="best")
?compute
predict <- compute(nn, dat3)
View(predict)
View(predict)
head(result)
head(predict)
head(predict$net.result)
max(predict$net.result)
result <- data.frame(actual = dat2$dat.Y, prediction = predict$net.result)
View(result)
dat2 <- data.frame(Y = dat$Y, ind_f)
dat3 = dummy_columns(dat2, select_columns = 'ind_f', remove_most_frequent_dummy = F)
View(dat3)
nn <- neuralnet( Y ~ ., data = dat3[ ,-2], hidden = c(30,10,5))
## plot network
plot(nn, rep="best")
predict <- compute(nn, dat3[ ,-2])
result <- data.frame(actual = dat2$dat.Y, prediction = predict$net.result)
View(predict)
result <- data.frame(actual = dat3$Y, prediction = predict$net.result)
View(result)
nn <- neuralnet( Y ~ ., data = dat3[ ,-2], hidden = c(20,10,5))
predict <- compute(nn, dat3[ ,-2])
result <- data.frame(actual = dat3$Y, prediction = predict$net.result)
View(result)
boxplot(result$prediction)
summarise(result)
summary(result)
id_0 <- which(result$actual == 0)
summary(result[id_0,])
id_1 <- setdiff(1:2000, id_0)
summary(result[id_0,])
summary(result[id_1,])
sapply(results,round,digits=0)
sapply(result,round,digits=0)
dat3$T <- dat3$Y == 1
dat3$F <- dat3$Y == 0
nn <- neuralnet( T+F ~ ., data = dat3[ ,-(1:2)], hidden = c(20,10,5))
## plot network
plot(nn, rep="best")
predict <- compute(nn, dat3[ ,-2])
View(predict)
View(dat3.df)
View(dat3)
predict <- compute(nn, dat3[ ,-(1:2)])
result <- data.frame(actual = dat3$Y, prediction = predict$net.result)
View(result)
dat3 = dummy_columns(dat2, select_columns = 'ind_f', remove_most_frequent_dummy = F)
View(dat3)
nn <- neuralnet( Y ~ ., data = dat3[ ,-2], hidden = c(20,10,5))
## plot network
plot(nn, rep="best")
predict <- compute(nn, dat3[ ,-(1:2)])
result <- data.frame(actual = dat3$Y, prediction = predict$net.result)
View(result)
id_0 <- which(result$actual == 0)
id_1 <- setdiff(1:2000, id_0)
summary(result[id_0,])
summary(result[id_1,])
nn <- neuralnet( Y ~ ., data = dat3[ ,-2], hidden = c(30,20,10,5))
## plot network
plot(nn, rep="best")
predict <- compute(nn, dat3[ ,-(1:2)])
result <- data.frame(actual = dat3$Y, prediction = predict$net.result)
id_0 <- which(result$actual == 0)
id_1 <- setdiff(1:2000, id_0)
summary(result[id_0,])
summary(result[id_1,])
nn <- neuralnet( Y ~ ., data = dat3[ ,-2], hidden = 10)
## plot network
plot(nn, rep="best")
predict <- compute(nn, dat3[ ,-(1:2)])
result <- data.frame(actual = dat3$Y, prediction = predict$net.result)
id_0 <- which(result$actual == 0)
id_1 <- setdiff(1:2000, id_0)
summary(result[id_0,])
summary(result[id_1,])
roundedresult <- sapply(result,round,digits=0)
result$prediction <- sapply(result$prediction,round,digits=0)
View(result)
sapply(0.4,round,digits=0)
sapply(0.5,round,digits=0)
sapply(0.6,round,digits=0)
sapply(0.51,round,digits=0)
?confusionMatrix
confusionMatrix(result$prediction, result$actual)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = dat3[ ,-2], hidden = c(20,10,5))
nn <- neuralnet( Y ~ ., data = dat3[ ,-2], hidden = c(20,10,5) )
predict <- compute(nn, dat3[ ,-(1:2)])
result <- data.frame(actual = dat3$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
predict <- compute(nn, dat3)
result <- data.frame(actual = dat3$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
View(dat3)
View(dat3)
View(dat)
write.csv(dat3, file = "instdustry_dummy")
write.csv(dat3, file = "instdustry_dummy.csv")
dat2 <- data.frame(Y = dat$Y, id = dat$id, ind_f)
dat3 = dummy_columns(dat2, select_columns = 'ind_f', remove_most_frequent_dummy = F)
View(dat3)
write.csv(dat3, file = "instdustry_dummy.csv")
# Partition
set.seed(2020)
n.train = floor( nrow(dat3)*.7 )
id.train = sample(1:nrow(dat3), n.train)
id.test = setdiff(1:nrow(dat3), id.train)
train <- dat3[id.train,]
test <- dat3[id.test,]
#One way to retrive train list
list <- read.csv(file = "train_num.csv")
train_list <- list$x
View(train)
head(train[ ,-(2:3)])
nn <- neuralnet( Y ~ ., data = train[ ,-(2:3)], hidden = c(20,10,5) )
predict <- compute(nn, test)
result <- data.frame(actual = dat3$Y, prediction = predict$net.result)
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
ytest <- rep(0, nrow(test))
ytest[which(test$CB.Rank..Company. < 10000)] <- 1
ypred <- rep(0, nrow(test))
confusionMatrix(as.factor(ypred), as.factor(ytest))
ytest <- rep(0, nrow(test))
ytest[which(test$CB.Rank..Company. < 10000)] <- 1
ypred <- rep(0, nrow(test))
library(caret)
confusionMatrix(as.factor(ypred), as.factor(ytest))
naive_result <- data.frame(actual = ytest, prediction = ypred)
View(naive_result)
View(test)
y_naive <- rep(0, nrow(test))
naive_result <- data.frame(actual = test$Y, prediction = y_naive)
confusionMatrix(as.factor(naive_result$prediction), as.factor(naive_result$actual))
#compare with naive rule
y_naive <- rep(0, nrow(test))
naive_result <- data.frame(actual = test$Y, prediction = y_naive)
confusionMatrix(as.factor(naive_result$prediction), as.factor(naive_result$actual))
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = train[ ,-(2:3)], hidden = c(30,20,10) )
predict <- compute(nn, test)
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
confusionMatrix(as.factor(naive_result$prediction), as.factor(naive_result$actual))
nn <- neuralnet( Y ~ ., data = train[ ,-(2:3)], hidden = 10 )
predict <- compute(nn, test)
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
View(nn)
predict <- compute(nn, test[,-(1:3)])
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = train[ ,-(2:3)], hidden = 20 )
predict <- compute(nn, test[,-(1:3)])
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = train[ ,-(2:3)], hidden = c(40,30,20,10))
predict <- compute(nn, test[,-(1:3)])
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = train[ ,-(2:3)], hidden = c(40,30,20,10,5))
## plot network
plot(nn, rep="best")
predict <- compute(nn, test[,-(1:3)])
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = train[ ,-(2:3)], hidden = 40)
predict <- compute(nn, test[,-(1:3)])
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = train[ ,-(2:3)], hidden = c(40,20))
predict <- compute(nn, test[,-(1:3)])
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = train[ ,-(2:3)], hidden = c(30,20,10))
predict <- compute(nn, test[,-(1:3)])
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = train[,-(2:3)], hidden = c(30,20,10), linear.output = F)
## plot network
plot(nn, rep="best")
predict <- compute(nn, test[,-(1:3)])
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
nn <- neuralnet( Y ~ ., data = train[,-(2:3)], hidden = c(40,30,20,10,5), linear.output = F)
predict <- compute(nn, test[,-(1:3)])
result <- data.frame(actual = test$Y, prediction = predict$net.result)
result$prediction <- sapply(result$prediction,round,digits=0)
confusionMatrix(as.factor(result$prediction), as.factor(result$actual))
## plot network
plot(nn, rep="best")
str(dat3)
